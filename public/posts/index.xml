<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Jeffrey&#39;s Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Jeffrey&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 30 Mar 2020 16:19:40 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mvcc</title>
      <link>/2020/03/mvcc/</link>
      <pubDate>Mon, 30 Mar 2020 16:19:40 +0800</pubDate>
      
      <guid>/2020/03/mvcc/</guid>
      <description>开始 最近在读《高性能MySQL》这本书，总结一下MVCC的内容。
个人观点，如有错误欢迎交流~
MVCC是什么？ MVCC全称是Multi-Version Concurrency Control，多版本并发控制。基于提升并发性能的考虑，很多数据库包括MySQL，Oracle也都实现了MVCC。
使用MVCC的好处？ MVCC的最大好处：读不加任何锁，读写不冲突，对于读操作多于写操作的应用，极大的增加了系统的并发性能。
MVCC是怎样工作的？ 不同存储引擎的MVCC实现是不同的，典型的有乐观（optimistic）并发控制和悲观（pessimistic）并发控制。
下面通过innoDB的简化版行为来说明MVCC是如何工作的。
InnoDB的MVCC是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（删除时间）。并且存储的并不是真实的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。
下面看一下在REPEATEABLE READ级别下，MVCC是如何具体操作的**：**
SELECT
 InnoDB会根据以下两个条件检查没行记录： a. InnoDB只会查找版本早于当前事务版本的数据行（也就是，行的系统版本小于或等于事务的系统版本号）， 这样可以确保事务读取到的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。 b. 行的删除版本要么未定义，要么大于当前事务的版本号。这样可以确保事务读取到的行，在事务之前未被 删除。 只有符合上述两个条件的记录，才能被作为返回查询结果
 INSERT
 InnoDB为新插入的一行保存当前系统版本号作为行版本号
 DELETE
 InnoDB为删除的每一行保存当前系统版本号作为删除标识
 UPDATE
 UPDATE为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识。
 只看文字可能不太好理解，下面用实例来说明一下，下面是一张学生信息表user_info
   student_ID name age created_time delete_time     1 Alice 18 12 14   2 Bob 20 11    3 David 19 16    4 Jeff 22 14 16    假如我们现在开启一个新事务，当前事务版本为15。</description>
    </item>
    
    <item>
      <title>数据库三范式</title>
      <link>/2020/03/nfs/</link>
      <pubDate>Sat, 21 Mar 2020 13:06:08 +0800</pubDate>
      
      <guid>/2020/03/nfs/</guid>
      <description>第一范式（1NF） 强调的是列的原子性，即列不能再分为其他列
考虑这样一张表【联系人】（电话，地址，姓名）。
其中电话可以分为家庭电话和公司电话，所以这张表没有达到1NF。
要符合1NF，只需要改成【联系人】（家庭电话，公司电话，地址，姓名）就行了
在实际工作中，当我们拿出一个表设计的时候，可以看成已经符合 1NF 了。为什么说&amp;quot;可以看成&amp;quot;呢？举个例子，假设我们的关系中有个属性 address，是由 province city street 组成的。如果我们是物流行业，以后会按省份或城市进行分析，在这样的场景下 address 就是可分的，那这样的设计就不符合 1NF。如果我们业务中地址只是用作一下展示，那么 address 作为一个整体就不必细分了。重点不在于域本身，而在于业务场景中要如何使用域。
第二范式（2NF） 首先要满足1NF，然后在此基础上满足两个条件
  有主键
  没有包含在主键中的列都必须完全依赖于主键，而不能只依赖主键的一部分，即不能有部分依赖
  考虑一个订单明细表：【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）
其中，（OrderID，ProductID）是主键，而UnitPrice，ProductName是依赖于ProductID的，和OrderID没关系，这样就产生了部分依赖，不满足2NF。
可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。
第三范式（3NF） 在1NF基础上，任何非主属性不依赖于其它非主属性[在2NF基础上消除传递依赖]。
第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。
例如，非主键列A依赖于非主键列B，而非主键列B依赖于主键，这就属于传递依赖。
考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。
其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。
但其中CustomerName，CustomerAddr，CustomerCity都依赖于非主键列CustomerID，而CustomerID依赖于OrderID。CustomerName，CustomerAddr，CustomerCity是通过传递才依赖于主键，所以不符合 3NF。
通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。
总结 范式只是一个工具。它的提出是为了帮助我们减少数据库的冗余性，在设计阶段为我们提供思考上的便利。前面的介绍中也可以看出，并不是一定要苛求&amp;quot;精确地&amp;quot;符合范式，我们最终的目的，还是要根据业务场景设计出合适的结构。</description>
    </item>
    
    <item>
      <title>Java中equals()和&#39;==&#39;和hashCode()的联系</title>
      <link>/2020/03/hashcode_equals/</link>
      <pubDate>Tue, 03 Mar 2020 17:11:48 +0800</pubDate>
      
      <guid>/2020/03/hashcode_equals/</guid>
      <description>Java 是值传递还是引用传递? Java只有值传递
== 与 equals()的区别 == ：它的作用是比较两个对象的地址是不是相同，判断两个对象是不是同一个对象(基本数据类型==比较的是值，引用数据类型比较的是内存地址)
equals()：它的作用也是比较两个对象是否相等。但它一般有两种使用情况：
  情况1：类没有覆盖equals()方法。则通过equals()比较两个对象时，等价于通过“==”比较这两个对象
  情况2：类覆盖了equals()方法。一般，我们都覆盖equals()方法来判断两个对象的内容相等，若两个对象的内容相等，则返回true。
  hashCode()是什么 hashCode()的作用是获取哈希码，也称散列码，实际上是一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。
hashCode() 定义在JDK的Object.java中。这意味着Java中的任何类都会包含该方法。虽然所有类都有这个函数，但是hashCode()函数，仅仅当“创建某个类的散列表”时有意义。用来确定该类的每一个对象在散列表中对应的位置。其他情况下，类的hashCode()没有作用。
hashCode()与 equals()的联系 hashCode() 与equals()都是Object.java中就有的方法。要判断他们之间的联系要分我们使用的类的情况讨论。
 不会创建&amp;quot;类对应的散列表&amp;rdquo;  所谓不会&amp;quot;创建类对应的散列表&amp;rdquo;，指的是该类不会使用到HashMap，HashSet，HashTable等本质是散列表的数据结构中。
在这种情况下，hashCode() 与equals()之间没有关系！
equals()用来比较两个类是否相等，而hashCode()没有作用。
会创建&amp;quot;类对应的散列表&amp;rdquo;  这种情况与第一种情况相对应，指的是该类会使用到HashMap，HashSet，HashTable等本质是散列表的数据结构。
这种情况下，hashCode() 与equals()之间是有关系的，而且必须重写hashCode() 与equals()方法。
  如果两个对象相等，那么他们的hashCode()值一定是相等的。( 这里的相等是指，通过equals()比较两个对象时返回true)
  如果两个对象hashCode()值相等，他们不一定相等。
  因为在散列表中，hashCode()相等，即两个键值对的哈希值相等。然而哈希值相等，并不一定能得出键值对相等。补充说一句：“两个不同的键值对，哈希值相等”，这就是哈希冲突。
此外，在这种情况下。若要判断两个对象是否相等，除了要覆盖equals()之外，也要覆盖hashCode()函数。否则，equals()无效。</description>
    </item>
    
    <item>
      <title>HashMap_analysis</title>
      <link>/2020/02/hashmap_analysis/</link>
      <pubDate>Wed, 26 Feb 2020 21:34:21 +0800</pubDate>
      
      <guid>/2020/02/hashmap_analysis/</guid>
      <description>概述 本文将从几个常用方法入手，来阅读HashMap的源码，读完一部分后就会进行总结。
按照从构造方法-&amp;gt;常用API（增、 删、改、查）的顺序来阅读源码。
构造方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52  /** * The default initial capacity - MUST be a power of two.</description>
    </item>
    
    <item>
      <title>ArrayList源码分析</title>
      <link>/2020/02/arraylist_analysis/</link>
      <pubDate>Sun, 16 Feb 2020 22:14:02 +0800</pubDate>
      
      <guid>/2020/02/arraylist_analysis/</guid>
      <description>概述 本文将从几个常用方法入手，来阅读ArrayList的源码，读完一部分后就会进行总结。
按照从构造方法-&amp;gt;常用API（增、 删、改、查）的顺序来阅读源码。
概要 ArrayList是动态数组，它是线程不安全的，允许元素是null。
ArrayList是继承自AbstractList类，实现了List&amp;lt;E&amp;gt;, RandomAccess, Cloneable, java.io.Serializable接口，其中RandomAccess代表了其拥有随机快速访问的能力，ArrayList可以以O(1)的时间复杂度去根据下标访问元素。
因为其底层数据结构是数组，可想而知，它是占据一块连续的内存空间，所以也有数组的缺点，空间效率不高。
由于数组的内存连续，可以根据下标以O(的时间读写(改查)元素，因此时间效率很高。
当集合中的元素超出这个容量，便会进行扩容操作。扩容操作也是ArrayList 的一个性能消耗比较大的地方，所以若我们可以提前预知数据的规模，应该通过public ArrayList(int initialCapacity) {}构造方法，指定集合的大小，去构建ArrayList实例，以减少扩容次数，提高效率。
或者在需要扩容的时候，手动调用public void ensureCapacity(int minCapacity) {}方法扩容。 不过该方法是ArrayList的API，不是List接口里的，所以使用时需要强转: ((ArrayList)list).ensureCapacity(30);
构造方法 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44  //默认构造方法中的空数组 private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; // 底层真正存储数据的数组 transient Object[] elementData; //默认构造方法 public ArrayList() { this.</description>
    </item>
    
    <item>
      <title>常见算法题</title>
      <link>/2020/02/fre-ques/</link>
      <pubDate>Sat, 15 Feb 2020 22:09:16 +0800</pubDate>
      
      <guid>/2020/02/fre-ques/</guid>
      <description>[TOC]
常见题 1. 寻找第K大的值 问题描述  在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。
示例 1:
输入: [3,2,1,5,6,4] 和 k = 2 输出: 5 示例 2:
输入: [3,2,3,1,2,4,5,5,6] 和 k = 4 输出: 4 说明:
你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/kth-largest-element-in-an-array
 问题分析 这道题有几种做法
 对数组进行排序，直接选出第k大的数字，这样做的时间复杂度是O(nlogn)，也就是排序的时间复杂度。 利用快速排序中partition的思想，对数组进行partition操作，即随机选择一个数x，比这个数小的数放在这个数左边，假设这部分为Sa，比这个数大的放在右边，假设这部分为Sb，如果Sb中的数个数为k-1，即比x大的数的个数k-1个，那么选择出来的这个数肯定是第k大的数。平均复杂度为O(n)。 使用一个大小为k的最小堆来存储最大的k个数字，接下来每次从输入的n个数中读入一个数。如果最小堆中的数字少于k个，则直接把这次读入的数放入最小堆之中，如果最小堆中已有k个数字了，也就是最小堆已满，此时我们将这个要输入的数和最小堆根节点的数进行比较，如果这个数比根节点的值还要小则不需要加进来，如果这个数比根节点的值大则将其插入堆中，替换掉一个节点的值。时间复杂度为O(nlogn)  对比：
第二种方法会修改原来的数组，而且不是很适合处理海量数据。因为一旦数组大小n很大，内存可能放不下整个数组。这个时候就可以使用第三种方法，这种方法尽管速度比第二种慢，但是更适合处理海量数据，即n很大，k较小的情况，每次读取一个数字时，判断是不是需要将其放入最小堆中就行，所以内存能放下大小为k的最小堆即可。
Solution   基于partition的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  public static int findKnumber(int[] nums, int k){ int R = nums.</description>
    </item>
    
    <item>
      <title>链表题汇总</title>
      <link>/2020/02/single-linked-questions/</link>
      <pubDate>Sat, 15 Feb 2020 21:23:15 +0800</pubDate>
      
      <guid>/2020/02/single-linked-questions/</guid>
      <description>链表题汇总 [TOC]
1.反转链表 问题描述  LeetCode: 输入一个链表，反转链表后，输出链表的所有元素。
示例:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
 问题分析 这道算法题，说直白点就是：如何让后一个节点指向前一个节点。下面的代码中定义了一个next节点用来保存反转后的头节点。
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode next = null; ListNode pre = null; while(head !</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on Jeffrey&#39;s Blog</title>
    <link>/tags/mysql/</link>
    <description>Recent content in MySQL on Jeffrey&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 30 Mar 2020 16:19:40 +0800</lastBuildDate>
    
	<atom:link href="/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>MySQL | 浅谈Mvcc机制</title>
      <link>/2020/03/mvcc/</link>
      <pubDate>Mon, 30 Mar 2020 16:19:40 +0800</pubDate>
      
      <guid>/2020/03/mvcc/</guid>
      <description>开始 最近在读《高性能MySQL》这本书，总结一下MVCC的内容。
个人观点，如有错误欢迎交流~
MVCC是什么？ MVCC全称是Multi-Version Concurrency Control，多版本并发控制。基于提升并发性能的考虑，很多数据库包括MySQL，Oracle也都实现了MVCC。
使用MVCC的好处？ MVCC的最大好处：读不加任何锁，读写不冲突，对于读操作多于写操作的应用，极大的增加了系统的并发性能。
MVCC是怎样工作的？ 不同存储引擎的MVCC实现是不同的，典型的有乐观（optimistic）并发控制和悲观（pessimistic）并发控制。
下面通过innoDB的简化版行为来说明MVCC是如何工作的。
InnoDB的MVCC是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（删除时间）。并且存储的并不是真实的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。
下面看一下在REPEATEABLE READ级别下，MVCC是如何具体操作的:
SELECT
InnoDB会根据以下两个条件检查没行记录： 1. InnoDB只会查找版本早于当前事务版本的数据行（也就是，行的系统版本小于或等于事务的系统版本号）， 这样可以确保事务读取到的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。 2. 行的删除版本要么未定义，要么大于当前事务的版本号。这样可以确保事务读取到的行，在事务之前未被 删除。 只有符合上述两个条件的记录，才能被作为返回查询结果
INSERT
InnoDB为新插入的一行保存当前系统版本号作为行版本号
DELETE
InnoDB为删除的每一行保存当前系统版本号作为删除标识
UPDATE
UPDATE为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识。
只看文字可能不太好理解，下面用实例来说明一下，下面是一张学生信息表user_info
   student_ID name age created_time delete_time     1 Alice 18 12 14   2 Bob 20 11    3 David 19 16    4 Jeff 22 14 16    假如我们现在开启一个新事务，当前事务版本为15。</description>
    </item>
    
  </channel>
</rss>
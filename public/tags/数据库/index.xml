<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据库 on Jeffrey&#39;s Blog</title>
    <link>/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
    <description>Recent content in 数据库 on Jeffrey&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 30 Mar 2020 16:19:40 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mvcc</title>
      <link>/2020/03/mvcc/</link>
      <pubDate>Mon, 30 Mar 2020 16:19:40 +0800</pubDate>
      
      <guid>/2020/03/mvcc/</guid>
      <description>开始 最近在读《高性能MySQL》这本书，总结一下MVCC的内容。
个人观点，如有错误欢迎交流~
MVCC是什么？ MVCC全称是Multi-Version Concurrency Control，多版本并发控制。基于提升并发性能的考虑，很多数据库包括MySQL，Oracle也都实现了MVCC。
使用MVCC的好处？ MVCC的最大好处：读不加任何锁，读写不冲突，对于读操作多于写操作的应用，极大的增加了系统的并发性能。
MVCC是怎样工作的？ 不同存储引擎的MVCC实现是不同的，典型的有乐观（optimistic）并发控制和悲观（pessimistic）并发控制。
下面通过innoDB的简化版行为来说明MVCC是如何工作的。
InnoDB的MVCC是通过在每行记录后面保存两个隐藏的列来实现。这两个列，一个保存了行的创建时间，一个保存了行的过期时间（删除时间）。并且存储的并不是真实的时间值，而是系统版本号（system version number）。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。
下面看一下在REPEATEABLE READ级别下，MVCC是如何具体操作的**：**
SELECT
InnoDB会根据以下两个条件检查没行记录：
  InnoDB只会查找版本早于当前事务版本的数据行（也就是，行的系统版本小于或等于事务的系统版本号）， 这样可以确保事务读取到的行，要么是事务开始前已经存在的，要么是事务自身插入或者修改过的。
  行的删除版本要么未定义，要么大于当前事务的版本号。这样可以确保事务读取到的行，在事务之前未被 删除。
  只有符合上述两个条件的记录，才能被作为返回查询结果  INSERT
InnoDB为新插入的一行保存当前系统版本号作为行版本号
DELETE
InnoDB为删除的每一行保存当前系统版本号作为删除标识
UPDATE
UPDATE为插入一行新纪录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为删除标识。
只看文字可能不太好理解，下面用实例来说明一下，下面是一张学生信息表user_info
   student_ID name age created_time delete_time     1 Alice 18 12 14   2 Bob 20 11    3 David 19 16    4 Jeff 22 14 16    假如我们现在开启一个新事务，当前事务版本为15。</description>
    </item>
    
    <item>
      <title>数据库三范式</title>
      <link>/2020/03/nfs/</link>
      <pubDate>Sat, 21 Mar 2020 13:06:08 +0800</pubDate>
      
      <guid>/2020/03/nfs/</guid>
      <description>第一范式（1NF） 强调的是列的原子性，即列不能再分为其他列
考虑这样一张表【联系人】（电话，地址，姓名）。
其中电话可以分为家庭电话和公司电话，所以这张表没有达到1NF。
要符合1NF，只需要改成【联系人】（家庭电话，公司电话，地址，姓名）就行了
在实际工作中，当我们拿出一个表设计的时候，可以看成已经符合 1NF 了。为什么说&amp;quot;可以看成&amp;quot;呢？举个例子，假设我们的关系中有个属性 address，是由 province city street 组成的。如果我们是物流行业，以后会按省份或城市进行分析，在这样的场景下 address 就是可分的，那这样的设计就不符合 1NF。如果我们业务中地址只是用作一下展示，那么 address 作为一个整体就不必细分了。重点不在于域本身，而在于业务场景中要如何使用域。
第二范式（2NF） 首先要满足1NF，然后在此基础上满足两个条件
  有主键
  没有包含在主键中的列都必须完全依赖于主键，而不能只依赖主键的一部分，即不能有部分依赖
  考虑一个订单明细表：【OrderDetail】（OrderID，ProductID，UnitPrice，Discount，Quantity，ProductName）
其中，（OrderID，ProductID）是主键，而UnitPrice，ProductName是依赖于ProductID的，和OrderID没关系，这样就产生了部分依赖，不满足2NF。
可以把【OrderDetail】表拆分为【OrderDetail】（OrderID，ProductID，Discount，Quantity）和【Product】（ProductID，UnitPrice，ProductName）来消除原订单表中UnitPrice，ProductName多次重复的情况。
第三范式（3NF） 在1NF基础上，任何非主属性不依赖于其它非主属性[在2NF基础上消除传递依赖]。
第三范式（3NF）是第二范式（2NF）的一个子集，即满足第三范式（3NF）必须满足第二范式（2NF）。
例如，非主键列A依赖于非主键列B，而非主键列B依赖于主键，这就属于传递依赖。
考虑一个订单表【Order】（OrderID，OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity）主键是（OrderID）。
其中 OrderDate，CustomerID，CustomerName，CustomerAddr，CustomerCity 等非主键列都完全依赖于主键（OrderID），所以符合 2NF。
但其中CustomerName，CustomerAddr，CustomerCity都依赖于非主键列CustomerID，而CustomerID依赖于OrderID。CustomerName，CustomerAddr，CustomerCity是通过传递才依赖于主键，所以不符合 3NF。
通过拆分【Order】为【Order】（OrderID，OrderDate，CustomerID）和【Customer】（CustomerID，CustomerName，CustomerAddr，CustomerCity）从而达到 3NF。
总结 范式只是一个工具。它的提出是为了帮助我们减少数据库的冗余性，在设计阶段为我们提供思考上的便利。前面的介绍中也可以看出，并不是一定要苛求&amp;quot;精确地&amp;quot;符合范式，我们最终的目的，还是要根据业务场景设计出合适的结构。</description>
    </item>
    
  </channel>
</rss>
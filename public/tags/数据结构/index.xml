<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>数据结构 on Jeffrey&#39;s Blog</title>
    <link>/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
    <description>Recent content in 数据结构 on Jeffrey&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Sun, 19 Jul 2020 20:10:08 +0800</lastBuildDate>
    
	<atom:link href="/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Count-Min Sketch算法</title>
      <link>/2020/07/countminsketch/</link>
      <pubDate>Sun, 19 Jul 2020 20:10:08 +0800</pubDate>
      
      <guid>/2020/07/countminsketch/</guid>
      <description>Count-Min Sketch算法 应用背景 之前我们有了解过布隆过滤器（Bloom Filter），布隆过滤器可以很好的处理判断海量数据中某元素是否存在的问题，但是布隆过滤器并不能统计元素出现的频率。
现在假如我们有个这样的需求：统计海量数据中元素的出现频率。
当然，我们可以选择哈希表存储每个元素出现的次数，但同样的问题，当数据量很大的时候，并不是一个可以接受的解决方式，因为会占用巨大的内存。
在这种情景下，Count-Min Sketch算法，简称CMS，应运而生，这是一种可以用来解决海量数据中统计频率的方法，类似于布隆过滤器，我们节省了大量内存空间，代价是牺牲掉些许的准确性。
实现原理 参考材料 https://florian.github.io/count-min-sketch/</description>
    </item>
    
    <item>
      <title>布隆过滤器(Bloom Filter)</title>
      <link>/2020/07/bloomfilter/</link>
      <pubDate>Thu, 16 Jul 2020 20:12:40 +0800</pubDate>
      
      <guid>/2020/07/bloomfilter/</guid>
      <description>应用背景 在我们开发软件的过程中，在很多场景下，我们都需要一个能迅速判断一个元素是否在一个集合中。譬如：
  网页爬虫对URL的去重，避免爬取相同的URL地址
  反垃圾邮件，从数十亿个垃圾邮件列表中判断某邮箱是否垃圾邮箱（同理，垃圾短信）
  我们可能很快就能想到用哈希表这种数据结构来实现，判断一个数是否存在重复，时间复杂度只要O(1)，拿到要判断的数，hash一下，找到对应的桶位置，看有没有被占用就行了。
当数据量小的时候使用哈希表可能没什么问题，但当数据量海量的时候，哈希表可能就顶不住了。
为啥顶不住呢？空间不够用了
试想一下1亿条数据，全部存在哈希表里，那就是1亿个键值对，就算key和value都是Int型，分别占4个字节，一对就是8个字节，1亿 * 8字节 = 0.75G内存，还有哈希表为了避免哈希冲突，一般存储效率都不是很高，我们都会设置一个负载因子，在Java的HashMap里这个负载因子的大小默认为0.75，意味着我们总是只使用最大容量*负载因子大小的空间来存储数据。总的来说为了进行数据查重，我们得花1G的内存，当我们数据量更大更复杂的时候，这个开销会更大，这个时候，布隆过滤器（Bloom Filter）就应运而生。在继续介绍布隆过滤器的原理时，先讲解下关于哈希函数的预备知识。
哈希函数 哈希函数的概念是：将任意大小的数据转换成特定大小的数据的函数，转换后的数据称为哈希值或哈希编码。下面是一幅示意图：
可以明显的看到，原始数据经过哈希函数的映射后称为了一个个的哈希编码，数据得到压缩。哈希函数是实现哈希表和布隆过滤器的基础。
实现原理 布隆过滤器（Bloom Filter）概念 布隆过滤器（英语：Bloom Filter）是1970年由一个叫布隆的小伙子提出的。它实际上是一个很长的二进制向量和一系列随机映射函数。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。
布隆过滤器数据结构 布隆过滤器的原理是，当一个元素被加入集合时，通过K个散列函数将这个元素映射成一个位数组中的K个点，把它们置为1。检索元素时，我们只要看看这些点是不是都是1就知道集合中有没有它了：
 如果这些点有任何一个0，则被检索元素一定不在 如果都是1，则被检索元素很可能在，但不能保证一定在  这就是布隆过滤器的基本思想。
再具体举个例子
布隆过滤器是一个 bit 向量或者说 bit 数组，长这样：
如果我们要映射一个值到布隆过滤器中，我们需要使用多个不同的哈希函数生成**多个哈希值，**并对每个生成的哈希值指向的 bit 位置 1，例如针对值 “baidu” 和三个不同的哈希函数分别生成了哈希值 1、4、7，则上图转变为：
Ok，我们现在再存一个值 “tencent”，如果哈希函数返回 3、4、8 的话，图继续变为：
值得注意的是，4 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此它被覆盖了。现在我们如果想查询 “dianping” 这个值是否存在，哈希函数返回了 1、5、8三个值，结果我们发现 5 这个 bit 位上的值为 0，说明没有任何一个值映射到这个 bit 位上，因此我们可以很确定地说 “dianping” 这个值不存在。而当我们需要查询 “baidu” 这个值是否存在的话，那么哈希函数必然会返回 1、4、7，然后我们检查发现这三个 bit 位上的值均为 1，那么我们可以说 “baidu” 存在了么？答案是不可以，只能是 “baidu” 这个值可能存在。</description>
    </item>
    
    <item>
      <title>常见算法题</title>
      <link>/2020/02/fre-ques/</link>
      <pubDate>Sat, 15 Feb 2020 22:09:16 +0800</pubDate>
      
      <guid>/2020/02/fre-ques/</guid>
      <description>[TOC]
常见题 1. 寻找第K大的值 问题描述  在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。
示例 1:
输入: [3,2,1,5,6,4] 和 k = 2 输出: 5 示例 2:
输入: [3,2,3,1,2,4,5,5,6] 和 k = 4 输出: 4 说明:
你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。
来源：力扣（LeetCode） 链接：https://leetcode-cn.com/problems/kth-largest-element-in-an-array
 问题分析 这道题有几种做法
 对数组进行排序，直接选出第k大的数字，这样做的时间复杂度是O(nlogn)，也就是排序的时间复杂度。 利用快速排序中partition的思想，对数组进行partition操作，即随机选择一个数x，比这个数小的数放在这个数左边，假设这部分为Sa，比这个数大的放在右边，假设这部分为Sb，如果Sb中的数个数为k-1，即比x大的数的个数k-1个，那么选择出来的这个数肯定是第k大的数。平均复杂度为O(n)。 使用一个大小为k的最小堆来存储最大的k个数字，接下来每次从输入的n个数中读入一个数。如果最小堆中的数字少于k个，则直接把这次读入的数放入最小堆之中，如果最小堆中已有k个数字了，也就是最小堆已满，此时我们将这个要输入的数和最小堆根节点的数进行比较，如果这个数比根节点的值还要小则不需要加进来，如果这个数比根节点的值大则将其插入堆中，替换掉一个节点的值。时间复杂度为O(nlogn)  对比：
第二种方法会修改原来的数组，而且不是很适合处理海量数据。因为一旦数组大小n很大，内存可能放不下整个数组。这个时候就可以使用第三种方法，这种方法尽管速度比第二种慢，但是更适合处理海量数据，即n很大，k较小的情况，每次读取一个数字时，判断是不是需要将其放入最小堆中就行，所以内存能放下大小为k的最小堆即可。
Solution   基于partition的方法
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45  public static int findKnumber(int[] nums, int k){ int R = nums.</description>
    </item>
    
    <item>
      <title>链表题汇总</title>
      <link>/2020/02/single-linked-questions/</link>
      <pubDate>Sat, 15 Feb 2020 21:23:15 +0800</pubDate>
      
      <guid>/2020/02/single-linked-questions/</guid>
      <description>链表题汇总 [TOC]
1.反转链表 问题描述  LeetCode: 输入一个链表，反转链表后，输出链表的所有元素。
示例:
输入: 1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5-&amp;gt;NULL
输出: 5-&amp;gt;4-&amp;gt;3-&amp;gt;2-&amp;gt;1-&amp;gt;NULL
 问题分析 这道算法题，说直白点就是：如何让后一个节点指向前一个节点。下面的代码中定义了一个next节点用来保存反转后的头节点。
Solution 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode next = null; ListNode pre = null; while(head !</description>
    </item>
    
  </channel>
</rss>